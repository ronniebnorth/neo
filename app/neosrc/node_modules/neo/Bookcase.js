const fs = require('fs-extra');
const path = require('path');
const log = require('log');
const neo = require('neo');
const Story = require('./Story.js');

/** The class for the singleton Bookcase property of the neo module. It is used
to access all documents/templates recognized by the current running neo instance. */
var self = module.exports = class Bookcase {
  /** Locate and load a neo story given a guid. Search all recognized story
  folders for a match. */
  static storyFromGuid(guid) {
    var stories = self.Stories.filter(story => story.metadata.guid == guid);

    return stories.length ? stories[0] : null;
  }

  /** Return an array of Story objects for all neo story files (.nsf) and neo
  template files (.ntf)  found in all recognized story folders. */
  static get Stories() {
    var stories = [];

    self.StoryFolders.forEach(dir => {
      fs.readdirSync(dir).forEach(file => {
        var filePath = path.join(dir, file);
        if (Story.isStory(filePath)) {
          stories.push(new Story(filePath));
        }
      });
    });

    return stories;
  }

  /** Returns an array of fully-qualified paths to all story folders exported by
  loaded neo tabs and the neoRoot. */
  static get StoryFolders() {
    var folders = [neo.StoryFolder];

    for (var tabName in neo.Tabs) {
      if ('StoryFolders' in neo.Tabs[tabName]) {
        folders = folders.concat(neo.Tabs[tabName].StoryFolders);
      }
    }

    return folders;
  }

  static get Shelves() {
    var shelves = {};

    this.Stories.forEach(story => {
      if (story.metadata.keywords) {
        story.metadata.keywords.forEach(keyword => {
          if (!(keyword in shelves)) {
            shelves[keyword] = [];
          }

          shelves[keyword].push(story);
        });
      }
    });

    // !!!LATER!!! here's where preferences will allow for re-ordering, hiding, etc.

    var ordered_shelves = [];
    for (var name in shelves) {
      ordered_shelves.push({name, stories:shelves[name]});
    }

    return ordered_shelves;
  }
}
