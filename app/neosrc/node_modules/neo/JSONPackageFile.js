const fs = require('fs-extra');
const lineByLine = require('n-readlines');
const log = require('log');

/** Acts as a wrapper around a JSON package file. See the FILEFORMAT.md document
for details about JSON package files. */
var self = module.exports = class JSONPackageFile {
  /** Return a valid uuid. */
  static guid() {
    return uuidv4();
  }

  /** Construct a new JSONPackageFile object given a path to the physical file. */
  constructor(filePath, typeURL, sourceJPF) {
    this._filePath = filePath;

    if (!fs.existsSync(this._filePath)) {
      var metadata = {
        "chunkType": "jpf_metadata",
        "guid": uuidv4()
      };
      this._content = [typeURL, metadata];

      if (sourceJPF) {
        this._content = this._content.concat(sourceJPF._content.slice(2));
      }
    } else {
      this._content = fs.readJsonSync(this._filePath);
    }
  }

  /** Returns the type URL for this JPF, reading the header (URL and metadata)
  if necessary. */
  get typeURL() {
    return this._content[0];
  }

  get content() {
    return this._content;
  }

  getChunk(chunkType) {
    var i = this._content.findIndex(el => typeof el == 'object' && 'chunkType' in el && el.chunkType == chunkType);

    if (i < 0) {
      var chunk = {chunkType};

      this._content.push(chunk);
      i = this._content.length -1;
    }

    return this._content[i];
  }

  updateChunk(chunkType, fn) {
    var i = this._content.findIndex(el => typeof el == 'object' && 'chunkType' in el && el.chunkType == chunkType);

    if (i < 0) {
      var chunk = {chunkType};

      this._content.push(chunk);
      i = this._content.length -1;
    }

    fn(this._content[i]);

    this.write();
  }

  write() {
    fs.writeFileSync(this._filePath, JSON.stringify(this._content, null, 2));
  }
}

/** Generate a version 4 UUID, credit to:
  https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript */
function uuidv4() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}
