const path = require('path');
const fs = require('fs-extra');

const log = require('log');
const neo = require('neo');

const Author = require('./Author.js');
const JSONPackageFile = require('./JSONPackageFile.js')

const typeURLs = {template: 'https://github.com/smeans/neo#NeoTemplateFile',
    story: 'https://github.com/smeans/neo#NeoStoryFile'}

var self = module.exports = class Story {
  /** Check if given path is a neo story or template. */
  static isStory(filePath) {
    // !!!LATER!!! add verification of type URL
    return ['.nsf', '.ntf'].indexOf(path.extname(filePath).toLowerCase()) > -1;
  }

  /** Construct a new Story from a file path or existing Story object. */
  constructor(filePath, typeURL, templateStory) {
    if (templateStory instanceof Story) {
      this.jpf = new JSONPackageFile(filePath, typeURL || typeURLs.story, templateStory.jpf);
    } else {
      this.jpf = new JSONPackageFile(filePath, typeURL || typeURLs.story);
    }
  }

  /** Create a new Story object using the current Story as a template. */
  newStory() {
    var baseName = neo.CurrentAuthor.firstName +  '\'s untitled ' + (this.metadata.title || '');
    var i = 0;
    var jpfPath;
    while ((fs.existsSync(jpfPath = path.join(neo.StoryFolder, baseName + (i ? ' ' + i : '') + '.nsf')))) {
      i++;
    }

    var newStory = new Story(jpfPath, typeURLs.story, this);
    newStory.metadata.title = 'untitled ' + this.metadata.title;
    newStory.metadata.author = neo.CurrentAuthor.fullName;
    newStory.metadata.keywords = ['wip', this.metadata.title]
    newStory.metadata.created = (new Date()).toJSON();

    newStory.write();

    return newStory;
  }

  /** Write the story file to disk. */
  write() {
    this.jpf.write();
  }

  /** The neo Author object who created this story. **/
  get Author() {
    return this._Author;
  }

  set Author(newAuthor) {
    this._Author = newAuthor;
  }

  get Tabs() {
    // !!!LATER!!! allow list to be customized by story
    return Object.values(neo.Tabs);
  }

  /** The type of story object (based on the anchor from the JPF URL). */
  get storyType() {
    return this.jpf.typeURL.split('#')[1];
  }

  /** Returns true if this document is a neo template. */
  get isTemplate() {
    return this.storyType == 'NeoTemplateFile';
  }

  get metadata() {
    return this.jpf.getChunk('jpf_metadata');
  }

  getPref(key) {
    var prefs = this.jpf.getChunk('neo_prefs');

    return prefs.values && prefs.values[key];
  }

  setPref(key, val) {
    var prefs = this.jpf.getChunk('neo_prefs');
    if (!('values' in prefs)) {
      prefs.values = {};
    }

    prefs.values[key] = val;

    this.jpf.write();
  }

  get story() {
    return this.jpf.getChunk('neo_story');
  }
}
