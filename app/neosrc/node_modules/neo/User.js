const fs = require('fs-extra');
const Author = require('./Author.js');
const JSONPackageFile = require('./JSONPackageFile.js')

const typeURL = 'https://github.com/smeans/neo#NeoUserFile';

/** Represents the single user of this neo instance. While there can be multiple
author profiles for one user, there can be only one user. */
var self = module.exports = class User {
  /** Construct a new User from either a full name or a JSON object. The object
  constructor is intended for deserialization. */
  constructor(filePath) {
    this.jpf = new JSONPackageFile(filePath, typeURL);
  }

  /** Currently selected default Author object for new documents. */
  get DefaultAuthor() {
    // !!!LATER!!! use prefs system
    return this.Authors[0];
  }

  /** The Authors property returns an array of authors (pseudonyms) this User
  has created. */
  get Authors() {
    var authors = [];

    fs.readdirSync(neo.AuthorsFolder).forEach(file => {
      var filePath = path.join(neo.AuthorsFolder, file);
      if (Author.isAuthor(filePath)) {
        authors.push(new Author(filePath));
      }
    });

    if (!authors.length) {
      authors.push(this.addAuthor(this.metadata.fullName));
    }

    return authors;
  }

  get metadata() {
    return this.jpf.getChunk('jpf_metadata');
  }

  getPref(key) {
    var prefs = this.jpf.getChunk('neo_prefs');

    return prefs.values && prefs.values[key];
  }

  setPref(key, val) {
    var prefs = this.jpf.getChunk('neo_prefs');
    if (!('values' in prefs)) {
      prefs.values = {};
    }

    prefs.values[key] = val;

    this.jpf.write();
  }

  addAuthor(fullName) {
    var author = new Author(path.join(neo.AuthorsFolder, fullName + '.naf'));

    author.updateChunk('jpf_metadata', metadata => {
      metadata.fullName = fullName;
    });

    return author;
  }

  updateChunk(chunkType, fn) {
    this.jpf.updateChunk(chunkType, fn);
  }
}
